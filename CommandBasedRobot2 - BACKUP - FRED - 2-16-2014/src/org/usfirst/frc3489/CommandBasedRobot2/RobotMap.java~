// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3489.CommandBasedRobot2;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainSpeedController1;
    public static SpeedController driveTrainSpeedController2;
    public static SpeedController driveTrainSpeedController3;
    public static SpeedController driveTrainSpeedController4;
    public static RobotDrive driveTraindrive;
    public static SpeedController driveTrainMidWheel;
    public static SpeedController armLoaderMotor;
    public static DigitalInput armLoadingLimit;
    public static AnalogChannel ultraSensorOut;
    public static Solenoid driveSolSolenoidMainWhl;
    public static Solenoid clawPosBottomClawSol;
    public static Solenoid clawPosTopClawSol;
    public static Compressor airgetterAirmaker;
    public static Solenoid omNomBitOmNomBitSol;
    public static AnalogChannel ultra2OtherSensorOut;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS\
    
    public static Solenoid midWheelSol;
            
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainSpeedController1 = new Talon(1, 1);
	LiveWindow.addActuator("DriveTrain", "Speed Controller 1", (Talon) driveTrainSpeedController1);
        
        driveTrainSpeedController2 = new Talon(1, 2);
	LiveWindow.addActuator("DriveTrain", "Speed Controller 2", (Talon) driveTrainSpeedController2);
        
        driveTrainSpeedController3 = new Talon(1, 3);
	LiveWindow.addActuator("DriveTrain", "Speed Controller 3", (Talon) driveTrainSpeedController3);
        
        driveTrainSpeedController4 = new Talon(1, 4);
	LiveWindow.addActuator("DriveTrain", "Speed Controller 4", (Talon) driveTrainSpeedController4);
        
        driveTraindrive = new RobotDrive(driveTrainSpeedController1, driveTrainSpeedController3,
              driveTrainSpeedController2, driveTrainSpeedController4);
	
        driveTraindrive.setSafetyEnabled(true);
        driveTraindrive.setExpiration(0.1);
        driveTraindrive.setSensitivity(0.5);
        driveTraindrive.setMaxOutput(1.0);
        driveTraindrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTraindrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveTrainMidWheel = new Talon(1, 5);
	LiveWindow.addActuator("DriveTrain", "MidWheel", (Talon) driveTrainMidWheel);
        
        armLoaderMotor = new Jaguar(1, 6);
	LiveWindow.addActuator("Arm", "LoaderMotor", (Jaguar) armLoaderMotor);
        
        armLoadingLimit = new DigitalInput(2, 3);
	LiveWindow.addSensor("Arm", "LoadingLimit", armLoadingLimit);
        
        ultraSensorOut = new AnalogChannel(1, 1);
	LiveWindow.addSensor("Ultra", "SensorOut", ultraSensorOut);
        
        driveSolSolenoidMainWhl = new Solenoid(1, 1);
	LiveWindow.addActuator("DriveSol", "SolenoidMainWhl", driveSolSolenoidMainWhl);
        
        clawPosBottomClawSol = new Solenoid(1, 2);
	LiveWindow.addActuator("ClawPos", "BottomClawSol", clawPosBottomClawSol);
        
        clawPosTopClawSol = new Solenoid(1, 3);
	LiveWindow.addActuator("ClawPos", "TopClawSol", clawPosTopClawSol);
        
        airgetterAirmaker = new Compressor(1, 14, 1, 1);
	
        
        omNomBitOmNomBitSol = new Solenoid(1, 4);
	LiveWindow.addActuator("OmNomBit", "OmNomBitSol", omNomBitOmNomBitSol);
        
        ultra2OtherSensorOut = new AnalogChannel(1, 2);
	LiveWindow.addSensor("Ultra2", "OtherSensorOut", ultra2OtherSensorOut);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    }
}
