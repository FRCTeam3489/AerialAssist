// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3489.CommandBasedRobot2;
import org.usfirst.frc3489.CommandBasedRobot2.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystick1;
    public JoystickButton tractionWheels;
    public Joystick joystick2;
    public JoystickButton loaderButton;
    public JoystickButton ejectButton;
    public JoystickButton bottomPos;
    public JoystickButton topPos;
    public JoystickButton bothPos;
    public JoystickButton noPos;
    public Joystick joystick3;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        joystick3 = new Joystick(3);
        
        noPos = new JoystickButton(joystick3, 8);
        noPos.whenPressed(new NoSolPos());
        bothPos = new JoystickButton(joystick3, 11);
        bothPos.whenPressed(new BothSolPos());
        topPos = new JoystickButton(joystick3, 10);
        topPos.whenPressed(new TopSolPos());
        bottomPos = new JoystickButton(joystick3, 9);
        bottomPos.whenPressed(new BottomSolPos());
        ejectButton = new JoystickButton(joystick3, 4);
        ejectButton.whileHeld(new EjectBall());
        loaderButton = new JoystickButton(joystick3, 3);
        loaderButton.whileHeld(new WheelLoaderInsert());
        joystick2 = new Joystick(2);
        
        tractionWheels = new JoystickButton(joystick2, 2);
        tractionWheels.whileHeld(new TractionDown());
        joystick1 = new Joystick(1);
        
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("TankDrive", new TankDrive());
        SmartDashboard.putData("WheelLoaderDoNothing", new WheelLoaderDoNothing());
        SmartDashboard.putData("WheelLoaderInsert", new WheelLoaderInsert());
        SmartDashboard.putData("WheelLoaderBackdrive", new WheelLoaderBackdrive());
        SmartDashboard.putData("EjectBall", new EjectBall());
        SmartDashboard.putData("InsertBall", new InsertBall());
        SmartDashboard.putData("LoaderArmExtension", new LoaderArmExtension());
        SmartDashboard.putData("Reader", new Reader());
        SmartDashboard.putData("TractionDown", new TractionDown());
        SmartDashboard.putData("OmniDown", new OmniDown());
        SmartDashboard.putData("BottomSolPos", new BottomSolPos());
        SmartDashboard.putData("TopSolPos", new TopSolPos());
        SmartDashboard.putData("BothSolPos", new BothSolPos());
        SmartDashboard.putData("NoSolPos", new NoSolPos());
        SmartDashboard.putData("StrafeDrive", new StrafeDrive());
        SmartDashboard.putData("Air", new Air());
        SmartDashboard.putData("OmNomBitOpen", new OmNomBitOpen());
        SmartDashboard.putData("OmNomBitClose", new OmNomBitClose());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }
    public Joystick getJoystick2() {
        return joystick2;
    }
    public Joystick getJoystick3() {
        return joystick3;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
